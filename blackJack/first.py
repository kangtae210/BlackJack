#카드 클래스 생성
class Card:
    name = ""
    shape = ""
    value1 = 0
    value2 = 0
    def __init__(self, shape,  name, value1, value2):
        self.shape = shape
        self.name = name
        self.value1 = value1
        self.value2 = value2
    
card_list = []
shape_list = ["star", "heart", "spade", "clover"]



for i in range(4):
    card_list.append(Card("{}".format(shape_list[i]),"A",1, 11))

    for j in range(2,11):
        card_list.append(Card("{}".format(shape_list[i]), str(j), j, j))

    card_list.append(Card("{}".format(shape_list[i]), "J",10, 10))
    card_list.append(Card("{}".format(shape_list[i]), "Q",10, 10))
    card_list.append(Card("{}".format(shape_list[i]), "K",10, 10))

print(len(card_list))
###############################################################
###############################################################
###############################################################
###############################################################
###############################################################
###############################################################
###############################################################
#  블랙잭 규칙
# 플레이어는 2장의 카드를 지급받고, 모두 오픈합니다.
# 딜러는 두 장의 카드를 받고 한장은 오픈, 한장은 하이드합니다.

# 플레이어는 본인의 패와 딜러의 카드 한장을 본 후,
# 카드를 더 받을지(히트), 그만받을지(스탠드) 선택합니다.

# 모든 플레이어가 스탠드를 하면 딜러의 카드를 오픈합니다.

# 딜러는 딜러의 카드 합이 17이 될 때까지 카드를 반드시 받으며
# 21이 넘으면 버스트되어 플레이어가 승리합니다.

# 딜러의 카드의 합이 버스트가 나지 않은 경우
# 딜러와 플레이어의 카드의 합을 비교해 21에 가까운 쪽이 승리합니다.
###############################################################
###############################################################
###############################################################
###############################################################
###############################################################
#카드의 가치
# 2~9는 숫자 그대로의 값을 갖습니다.
# 10,J,Q,K는 10을 의미합니다.
# A는 1 혹은 11로 플레이어가 선택합니다.
###############################################################
###############################################################
###############################################################
###############################################################
###############################################################



